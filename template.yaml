AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda stack for fetching, storing, and retrieving Sleeper player data

Resources:
  SleeperQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: sleeper-process-queue
      VisibilityTimeout: 330

  APILambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api_lambda/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Policies:
        - SQSSendMessagePolicy:
            QueueName: sleeper-process-queue
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /start-sync
            Method: POST
      Environment:
        Variables:
          QUEUE_URL: !Ref SleeperQueue

  FetchAndStorePlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/fetch_and_store_players/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 300
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SleeperQueue.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: SleeperPlayers
      Environment:
        Variables:
          TABLE_NAME: SleeperPlayers

  GetPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_players/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 15
      Policies:
        - DynamoDBReadPolicy:
            TableName: SleeperPlayers
      Events:
        GetPlayersApi:
          Type: Api
          Properties:
            Path: /players
            Method: GET
      Environment:
        Variables:
          TABLE_NAME: SleeperPlayers
          # ðŸ‘‡ pass the new GSI name to the lambda so code isn't hard-coded
          POS_TEAM_INDEX: PosTeamRankIndexV2

  ComparePlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/compare_players/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 15
      Events:
        ComparePlayersApi:
          Type: Api
          Properties:
            Path: /compare
            Method: POST
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: arn:aws:ssm:*:*:parameter/fantasy-ai/openai_api_key

  KeeperRecommendationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/keeper_recommendations/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 20
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: arn:aws:ssm:*:*:parameter/fantasy-ai/openai_api_key
      Events:
        KeeperApi:
          Type: Api
          Properties:
            Path: /keepers
            Method: POST

  SleeperPlayers:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SleeperPlayers
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: player_id
          AttributeType: S
        - AttributeName: position
          AttributeType: S
        - AttributeName: pos_team
          AttributeType: S
        - AttributeName: search_rank
          AttributeType: N
      KeySchema:
        - AttributeName: player_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        # Existing position-only index
        - IndexName: PositionIndex
          KeySchema:
            - AttributeName: position
              KeyType: HASH
          Projection:
            ProjectionType: ALL

        # OLD index stays (cannot change projection in-place)
        - IndexName: PosTeamRankIndex
          KeySchema:
            - AttributeName: pos_team
              KeyType: HASH
            - AttributeName: search_rank
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - first_name
              - last_name
              - team
              - position

        # NEW index with ProjectionType: ALL
        - IndexName: PosTeamRankIndexV2
          KeySchema:
            - AttributeName: pos_team
              KeyType: HASH
            - AttributeName: search_rank
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

Outputs:
  ApiEndpoint:
    Description: "Base URL for your API Gateway"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: "FantasyApiBaseUrl"

  StartSyncEndpoint:
    Description: "Endpoint to trigger player sync"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/start-sync"

  GetPlayersEndpoint:
    Description: "Endpoint to retrieve players by position"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/players"

  ComparePlayersEndpoint:
    Description: "Endpoint to compare players with OpenAI"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/compare"

  KeeperRecommendationsEndpoint:
    Description: "Endpoint to get keeper recommendations"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/keepers"
